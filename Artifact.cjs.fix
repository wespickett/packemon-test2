'use strict';

const _excluded = ["output"],
  _excluded2 = ["originalFormat"];
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
const execa = require('execa');
const fs = require('fs-extra');
const rollup = require('rollup');
const cli = require('@boost/cli');
const common = require('@boost/common');
const debug = require('@boost/debug');
const removeSourcePath = require('./helpers/removeSourcePath.cjs');
const config = require('./rollup/config.cjs');
const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};
const execa__default = /*#__PURE__*/_interopDefault(execa);
const fs__default = /*#__PURE__*/_interopDefault(fs);
class Artifact {
  // List of artifacts to build

  // Stats on the built artifacts

  // Config object in which inputs are grouped in

  // List of custom Rollup externals

  // Mapping of output names to input paths

  // Namespace for UMD bundles

  // Platform code will run on

  // The package being built

  // Are multiple builds writing to the lib folder

  // Target version code will run in

  // Current state

  constructor(pkg, builds) {
    this.api = 'private';
    this.bundle = true;
    this.builds = [];
    this.buildResult = {
      files: [],
      time: 0
    };
    this.configGroup = 0;
    this.externals = [];
    this.inputs = {};
    this.namespace = '';
    this.platform = 'node';
    this.package = void 0;
    this.sharedLib = false;
    this.support = 'stable';
    this.state = 'pending';
    this.debug = void 0;
    this.package = pkg;
    this.builds = builds;
    this.debug = debug.createDebugger(['packemon', 'artifact', pkg.getSlug(), this.getLabel()]);
  }

  /**
   * Build code and types in parallel.
   */
  async build(options, features, packemonConfig) {
    await Promise.all([this.buildCode(features, packemonConfig), this.buildTypes(features)]);
  }

  /**
   * Build code artifacts using Rollup. We'll spin up a Rollup instance for each output,
   * as Rollup will then generate all the necessary formats. For example:
   * index -> cjs, lib.
   */
  async buildCode(features, packemonConfig) {
    this.debug('Building code artifacts with Rollup');
    const _await$config$getRoll = await config.getRollupConfig(this, features, packemonConfig),
      _await$config$getRoll2 = _await$config$getRoll.output,
      output = _await$config$getRoll2 === void 0 ? [] : _await$config$getRoll2,
      input = _objectWithoutProperties(_await$config$getRoll, _excluded);
    const bundle = await rollup.rollup(_objectSpread(_objectSpread({}, input), {}, {
      onwarn: /* istanbul ignore next */({
        id,
        loc = {},
        message
      }) => {
        this.logWithSource(message, 'warn', {
          id: id && id !== loc.file ? id : undefined,
          output: this.package.getSlug(),
          sourceColumn: loc.column,
          sourceFile: loc.file,
          sourceLine: loc.line
        });
      }
    }));
    const files = [];
    await Promise.all(common.toArray(output).map(async (out, index) => {
      const _out$originalFormat = out.originalFormat,
        originalFormat = _out$originalFormat === void 0 ? 'lib' : _out$originalFormat,
        outOptions = _objectWithoutProperties(out, _excluded2);
      this.debug(' - Writing `%s` output', originalFormat);

      // While testing we want to avoid writing files,
      // so use generate() instead of write():
      // https://github.com/rollup/rollup/issues/4082
      const result = process.env.NODE_ENV === 'test' && !process.env.PACKEMON_TEST_WRITE ? await bundle.generate(outOptions) : await bundle.write(outOptions);

      // Update build results and stats
      const bundledCode = result.output.reduce((code, chunk) => {
        if (chunk.type === 'chunk') {
          files.push({
            code: chunk.code,
            file: `${originalFormat}/${chunk.fileName}`
          });
          return code + chunk.code;
        }
        return code;
      }, '');
      this.builds[index].stats = {
        size: Buffer.byteLength(bundledCode)
      };
      return result;
    }));
    this.buildResult.files = files;
  }

  /**
   * Build type artifacts using TypeScript. We'll need to spin up an individual process
   * for each format, as they may require different declaration outputs or compiler options.
   */
  async buildTypes(features) {
    if (!features.typescript) {
      return;
    }
    this.debug('Building types artifacts with TypeScript');
    await Promise.all(this.builds.map(build => {
      if (!build.declaration) {
        return Promise.resolve();
      }
      const args = [];
      if (features.typescriptComposite) {
        args.push('--build', '--force', `tsconfig.${build.format}.json`);
      } else {
        args.push('--declaration', '--declarationDir', build.format, '--declarationMap', '--emitDeclarationOnly', '--project', `tsconfig.${build.format}.json`);
      }
      return execa__default.default('tsc', args, {
        cwd: this.package.path.path(),
        preferLocal: true
      });
    }));
  }
  async clean() {
    this.debug('Cleaning artifact directories');
    const dirs = ['assets', 'dts', ...this.builds.map(build => build.format)];
    await Promise.all(dirs.map(async dir => {
      const dirPath = this.package.path.append(dir).path();
      this.debug('  - %s', dirPath);
      await fs__default.default.remove(dirPath);
    }));
  }
  findEntryPoint(formats, outputName) {
    for (const format of formats) {
      const build = this.builds.find(build => build.format === format);
      if (build) {
        return this.getBuildOutput(format, outputName, build.declaration);
      }
    }
    return undefined;
  }

  // eslint-disable-next-line complexity
  getBuildOutput(format, outputName, declaration = false) {
    const inputFile = this.inputs[outputName];
    const inputPath = inputFile ? removeSourcePath.removeSourcePath(inputFile) : undefined;
    let outputPath = outputName;

    // When using a public API, we do not create output files based on the input map.
    // Instead files mirror the source file structure, so we need to take that into account!
    if ((this.api === 'public' || !this.bundle) && inputPath) {
      outputPath = inputPath;
    }
    const folder = format === 'lib' && this.sharedLib ? `lib/${this.platform}` : format;
    // Folder path for declarations cannot have the platform subpath, since multiple builds can 
		// share the same tsconfig
		const declFolder = format;
    const entryExt = format === 'cjs' || format === 'mjs' ? format : 'js';
    let declExt;
    if (declaration) {
      if (!inputFile || /\.tsx?$/.test(inputFile)) {
        declExt = 'd.ts';
      } else if (inputFile.endsWith('.cts')) {
        declExt = 'd.cts';
      } else if (inputFile.endsWith('.mts')) {
        declExt = 'd.mts';
      }
    }
    return {
      declExt,
      declPath: declExt ? `./${new common.VirtualPath(declFolder, `${inputPath ?? outputPath}.${declExt}`)}` : undefined,
      entryExt,
      entryPath: `./${new common.VirtualPath(folder, `${outputPath}.${entryExt}`)}`,
      folder
    };
  }
  getIndexInput() {
    return this.inputs.index ? 'index' : Object.keys(this.inputs)[0];
  }
  getInputPaths() {
    return Object.fromEntries(Object.entries(this.inputs).map(([outputName, inputFile]) => [outputName,
    // Return absolute paths so that Rollup paths/externals resolve correctly
    this.package.path.append(inputFile).path()]));
  }
  getLabel() {
    return `${this.platform}:${this.support}:${this.builds.map(build => build.format).join(',')}`;
  }
  getPackageExports(features) {
    const exportMap = {};
    if (this.api === 'private' || this.bundle) {
      Object.keys(this.inputs).forEach(outputName => {
        this.mapPackageExportsFromBuilds(outputName, exportMap, features);
      });
    } else {
      // Use subpath export patterns when not bundling
      // https://nodejs.org/api/packages.html#subpath-patterns
      this.mapPackageExportsFromBuilds('*', exportMap, features);
      this.mapPackageExportsFromBuilds(this.getIndexInput(), exportMap, features, true);
    }
    return exportMap;
  }
  isComplete() {
    return this.state === 'passed' || this.state === 'failed';
  }
  isRunning() {
    return this.state === 'building';
  }
  toString() {
    return this.getLabel();
  }

  // eslint-disable-next-line complexity
  mapPackageExportsFromBuilds(outputName, exportMap, features, index = false) {
    const defaultEntry = this.findEntryPoint(['lib'], outputName);
    let paths = {};
    switch (this.platform) {
      case 'electron':
      case 'browser':
        {
          const esmEntry = this.findEntryPoint(['esm'], outputName);
          if (esmEntry) {
            paths = {
              types: esmEntry.declPath,
              module: esmEntry.entryPath,
              // Bundlers
              import: esmEntry.entryPath
            };
          }

          // Node.js tooling
          const libEntry = this.findEntryPoint(['umd', 'lib'], outputName);
          paths.types ??= libEntry?.declPath;
          paths.default = libEntry?.entryPath;
          break;
        }
      case 'node':
        {
          const mjsEntry = this.findEntryPoint(['mjs'], outputName);
          const cjsEntry = this.findEntryPoint(['cjs'], outputName);
          if (mjsEntry && cjsEntry) {
            paths = {
              import: {
                types: mjsEntry.declPath,
                default: mjsEntry.entryPath
              },
              require: {
                types: cjsEntry.declPath,
                default: cjsEntry.entryPath
              }
            };
          } else if (mjsEntry) {
            paths = {
              types: mjsEntry.declPath,
              import: mjsEntry.entryPath
            };
          } else if (cjsEntry) {
            paths = {
              types: cjsEntry.declPath,
              require: cjsEntry.entryPath
            };

            // Automatically apply the mjs wrapper for cjs
            if (!paths.import && outputName !== '*') {
              paths.import = cjsEntry.entryPath.replace('.cjs', '-wrapper.mjs');
            }
          }
          if (defaultEntry) {
            if (!paths.types && !common.isObject(paths.import) && !common.isObject(paths.require)) {
              paths.types = defaultEntry.declPath;
            }
            if (!paths.require) {
              paths.default = defaultEntry.entryPath;
            }
          }
          break;
        }
      case 'native':
        paths.types = defaultEntry?.declPath;
        paths.default = defaultEntry?.entryPath;
        break;
      default:
        break;
    }
    const pathsMap = {
      [this.platform === 'native' ? 'react-native' : this.platform]: paths
    };

    // Point to the source files when using solid
    if (features.solid) {
      if (outputName === '*') {
        pathsMap.solid = `./src/*.${features.typescript ? 'tsx' : 'js'}`;
      } else {
        const input = this.inputs[outputName];
        pathsMap.solid = input.startsWith('./') ? input : `./${input}`;
      }
    }

    // Provide fallbacks if condition above is not
    if (defaultEntry) {
      pathsMap.default = defaultEntry.entryPath;
    }

    // eslint-disable-next-line no-param-reassign
    exportMap[index || outputName === 'index' ? '.' : `./${outputName}`] = pathsMap;
  }
  logWithSource(message, level, {
    id,
    output,
    sourceColumn,
    sourceFile,
    sourceLine
  } = {}) {
    let msg = `[${this.package.getName()}${output ? `:${output}` : ''}] ${message}`;
    const meta = [];
    if (id) {
      meta.push(`id=${id}`);
    }
    if (sourceFile) {
      meta.push(`file=${new common.Path(sourceFile).path().replace(this.package.path.path(), '').slice(1)}`);
    }
    if (sourceLine || sourceColumn) {
      meta.push(`line=${sourceLine ?? '?'}:${sourceColumn ?? '?'}`);
    }
    if (meta.length > 0) {
      msg += cli.applyStyle(` (${meta.join(' ')})`, 'muted');
    }
    console[level](msg);
  }
}
exports.Artifact = Artifact;
//# sourceMappingURL=Artifact.cjs.map
